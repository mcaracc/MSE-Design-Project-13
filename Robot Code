#include <Servo.h>
#include <EEPROM.h>
#include <uSTimer2.h>
#include <CharliePlexM.h>
#include <Wire.h>
#include <I2CEncoder.h>

Servo servo_RightMotor;
Servo servo_LeftMotor;
Servo servo_SweeperMotor;
Servo servo_ScooperMotor;

I2CEncoder encoder_RightMotor;
I2CEncoder encoder_LeftMotor;

// Uncomment keywords to enable debugging output
  //#define DEBUG_MODE_DISPLAY
  //#define DEBUG_MOTORS
  //#define DEBUG_ENCODERS
  //#define DEBUG_ULTRASONIC
  //#define DEBUG_LINE_TRACKER_CALIBRATION
  //#define DEBUG_MOTOR_CALIBRATION

boolean bt_Motors_Enabled = true;

//port pin constants
const int Ultrasonic_Ping1 = 2;   //input plug
const int Ultrasonic_Data1 = 3;   //output plug
const int ci_Charlieplex_LED1 = 4;
const int ci_Charlieplex_LED2 = 5;
const int ci_Charlieplex_LED3 = 6;
const int ci_Charlieplex_LED4 = 7;
const int ci_Mode_Button = 7;
const int ci_Right_Motor = 8;
const int ci_Left_Motor = 9;
//const int (insert motor / sensor here) = 10;
//const int (insert motor / sensor here) = 11
const int ci_Motor_Enable_Switch = 12;
const int Ultrasonic_Ping2 = A0;
const int Ultrasonic_Data2 = A1;
const int ci_Scooper_Motor = A2;
const int ci_Light_Sensor = A3;
const int ci_I2C_SDA = A4;         // I2C data = white
const int ci_I2C_SCL = A5;         // I2C clock = yellow

unsigned long ultrasonic1;
unsigned long ultrasonic2;

// Charlieplexing LED assignments
const int ci_Heartbeat_LED = 1;
const int ci_Indicator_LED = 4;
//const int ci_Right_Line_Tracker_LED = 6;
//const int ci_Middle_Line_Tracker_LED = 9;
//const int ci_Left_Line_Tracker_LED = 12;

//constants

// EEPROM addresses
const int ci_Left_Motor_Offset_Address_L = 12;
const int ci_Left_Motor_Offset_Address_H = 13;
const int ci_Right_Motor_Offset_Address_L = 14;
const int ci_Right_Motor_Offset_Address_H = 15;

const int ci_Left_Motor_Stop = 1500;        // 200 for brake mode; 1500 for stop
const int ci_Right_Motor_Stop = 1500;

const int ci_Scooper_Motor_Up = 140;
const int ci_Scooper_Motor_Down = 20;

const int ci_Display_Time = 500;
const int ci_Motor_Calibration_Cycles = 3;
const int ci_Motor_Calibration_Time = 5000;

//variables
byte b_LowByte;
byte b_HighByte;
unsigned int ui_Motors_Speed = 1900;        // Default run speed
unsigned int ui_Left_Motor_Speed;
unsigned int ui_Right_Motor_Speed;
long l_Left_Motor_Position;
long l_Right_Motor_Position;

unsigned long ul_3_Second_timer = 0;
unsigned long ul_Display_Time;
unsigned long ul_Calibration_Time;
unsigned long ui_Left_Motor_Offset;
unsigned long ui_Right_Motor_Offset;

unsigned int ui_Cal_Count;
unsigned int ui_Cal_Cycle;

unsigned int  ui_Robot_State_Index = 0;
//0123456789ABCDEF
unsigned int  ui_Mode_Indicator[6] = {
  0x00,    //B0000000000000000,  //Stop
  0x00FF,  //B0000000011111111,  //Run
  0x0F0F,  //B0000111100001111,  //Calibrate line tracker light level
  0x3333,  //B0011001100110011,  //Calibrate line tracker dark level
  0xAAAA,  //B1010101010101010,  //Calibrate motors
  0xFFFF   //B1111111111111111   //Unused
};

unsigned int  ui_Mode_Indicator_Index = 0;

//display Bits 0,1,2,3, 4, 5, 6,  7,  8,  9,  10,  11,  12,  13,   14,   15
int  iArray[16] = {
  1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,65536};
int  iArrayIndex = 0;

boolean bt_Heartbeat = true;
boolean bt_3_S_Time_Up = false;
boolean bt_Do_Once = false;
boolean bt_Cal_Initialized = false;

//flags
  bool T = false;
  bool M = true;
  bool F = false;
  bool G = false;
  bool A = true;
  bool B = true;

unsigned long currentMillis;
unsigned long startVal;


void setup() 
{
  Wire.begin();// Wire library required for I2CEncoder library
  Serial.begin(9600);

  CharliePlexM::setBtn(ci_Charlieplex_LED1,ci_Charlieplex_LED2,ci_Charlieplex_LED3,ci_Charlieplex_LED4,ci_Mode_Button);

  //Set up Front facing ultrasonic sensor
    pinMode(Ultrasonic_Ping1, OUTPUT);
    pinMode(Ultrasonic_Data1, INPUT);
  // Set up Left facing ultrasonic sensor
    pinMode(Ultrasonic_Ping2, OUTPUT);
    pinMode(Ultrasonic_Data2, INPUT);

  // set up drive motors
    pinMode(ci_Right_Motor, OUTPUT);
    servo_RightMotor.attach(ci_Right_Motor);
    pinMode(ci_Left_Motor, OUTPUT);
    servo_LeftMotor.attach(ci_Left_Motor);

  // set up scooper motor
 pinMode(ci_Scooper_Motor, OUTPUT);
servo_ScooperMotor.attach(ci_Scooper_Motor);

  // set up encoders. Must be initialized in order that they are chained together, 
  // starting with the encoder directly connected to the Arduino
    encoder_LeftMotor.init(1.0/3.0*MOTOR_393_SPEED_ROTATIONS, MOTOR_393_TIME_DELTA);
    encoder_LeftMotor.setReversed(false);  // adjust for positive count when moving forward
    encoder_RightMotor.init(1.0/3.0*MOTOR_393_SPEED_ROTATIONS, MOTOR_393_TIME_DELTA);  
    encoder_RightMotor.setReversed(true);  // adjust for positive count when moving forward

  // read saved values from EEPROM
  b_LowByte = EEPROM.read(ci_Left_Motor_Offset_Address_L);
  b_HighByte = EEPROM.read(ci_Left_Motor_Offset_Address_H);
  ui_Left_Motor_Offset = word(b_HighByte, b_LowByte);
  b_LowByte = EEPROM.read(ci_Right_Motor_Offset_Address_L);
  b_HighByte = EEPROM.read(ci_Right_Motor_Offset_Address_H);
  ui_Right_Motor_Offset = word(b_HighByte, b_LowByte);
}

void loop()
{
  if((millis() - ul_3_Second_timer) > 3000)
  {
    bt_3_S_Time_Up = true;
  }

  // button-based mode selection
  if(CharliePlexM::ui_Btn)
  {
    if(bt_Do_Once == false)
    {
      bt_Do_Once = true;
      ui_Robot_State_Index++;
      ui_Robot_State_Index = ui_Robot_State_Index & 7;
      ul_3_Second_timer = millis();
      bt_3_S_Time_Up = false;
      bt_Cal_Initialized = false;
      ui_Cal_Cycle = 0;
    }
  }
  else
  {
    bt_Do_Once = LOW;
  }

  // check if drive motors should be powered
  bt_Motors_Enabled = digitalRead(ci_Motor_Enable_Switch);

  // modes 
  // 0 = default after power up/reset
  // 1 = Press mode button once to enter. Run robot.
  // 2 = Press mode button twice to enter. Calibrate line tracker light level.
  // 3 = Press mode button three times to enter. Calibrate line tracker dark level.
  // 4 = Press mode button four times to enter. Calibrate motor speeds to drive straight.
  
  switch(ui_Robot_State_Index)
  {
    case 0: //Robot stopped
    {
      Serial.print("nothing...");
      Serial.print('\n');
      Ping1();
      servo_LeftMotor.writeMicroseconds(ci_Left_Motor_Stop); 
      servo_RightMotor.writeMicroseconds(ci_Right_Motor_Stop);
      ui_Mode_Indicator_Index = 0;
      encoder_LeftMotor.zero();
      encoder_RightMotor.zero();
      break;
    } 
  
    case 1:  //Robot Run after 3 seconds
    {
      if(bt_3_S_Time_Up)
      {
        Ping1();
        Ping2();
        Serial.print("Ultrasonic 1: ");
        Serial.print(ultrasonic1/58);
        Serial.print('\n');
        Serial.print("Ultrasonic 2: ");
        Serial.print(ultrasonic2/58);
        Serial.print('\n');
        if ( (ultrasonic1/58 > 8) && (ultrasonic2/58 > 8) && A == true) //Case 1: no objects nearby, drive straight 
        {
          servo_RightMotor.writeMicroseconds(1800);
          servo_LeftMotor.writeMicroseconds(1800);
          Serial.print('\n');
          Serial.print ("1");
          Serial.print('\n');
        }
        else if ( ((ultrasonic1/58) <= 8 && (ultrasonic1/58) > 1)  && ((ultrasonic2/58) > 8) && B == true) //Case 2: object in front, NO object on left, back up turn left
        {
          servo_LeftMotor.writeMicroseconds(1500); //stop
          servo_RightMotor.writeMicroseconds(1500);
          Serial.print ("2");
          Serial.print('\n'); 
          T = true; 
          A = false;
          B = false;
        }
          if (T == true)
          {
            currentMillis = millis();
            //Serial.print ("Millis: ");
            //Serial.print (currentMillis);
            //Serial.print('\n')
              if(M == true) // start timer
              {
                startVal = currentMillis;
                M = false;
              }
              if (M == false)
              {
                  if((currentMillis-startVal) < 400) //back up slightly after .4 seconds
                  {
                    servo_RightMotor.writeMicroseconds(1400);
                    servo_LeftMotor.writeMicroseconds(1400);
                    Serial.print("3");
                    Serial.print('\n');
                  }
                  else if((currentMillis-startVal)> 400 && (currentMillis-startVal) < 2000)//turn left
                  {
                    servo_RightMotor.writeMicroseconds(1700);
                    servo_LeftMotor.writeMicroseconds(1500);
                    Serial.print("4");
                    Serial.print('\n');
                  }
                  else if((currentMillis-startVal) > 1500)
                  {
                    A = true;
                    M = true;
                    T = false;
                    B = true;
                  }
              }
           }
            
        ui_Mode_Indicator_Index = 1;
      }
      break;
    }  
    case 2:
    {
        servo_ScooperMotor.write(ci_Scooper_Motor_Down);
        delay (2000);
         servo_ScooperMotor.write(ci_Scooper_Motor_Up);
        delay (2000);
        
      ui_Mode_Indicator_Index = 2; 
      break;
    }
    
    case 3:
    {
      ui_Mode_Indicator_Index = 3;
      break;
    }
   
    case 4:    //Calibrate motor straightness after 3 seconds.
    {
      if(bt_3_S_Time_Up)
      {
        if(!bt_Cal_Initialized)
        {
          bt_Cal_Initialized = true;
          encoder_LeftMotor.zero();
          encoder_RightMotor.zero();
          ul_Calibration_Time = millis();
          servo_LeftMotor.writeMicroseconds(ci_Left_Motor_Stop); 
          servo_RightMotor.writeMicroseconds(ci_Right_Motor_Stop); 
          
          servo_LeftMotor.writeMicroseconds(ui_Motors_Speed+100);
          servo_RightMotor.writeMicroseconds(ui_Motors_Speed-40);
        }
        else if((millis() - ul_Calibration_Time) > ci_Motor_Calibration_Time) 
        {
          servo_LeftMotor.writeMicroseconds(ci_Left_Motor_Stop); 
          servo_RightMotor.writeMicroseconds(ci_Right_Motor_Stop); 
          l_Left_Motor_Position = encoder_LeftMotor.getRawPosition();
          l_Right_Motor_Position = encoder_RightMotor.getRawPosition();
          if(l_Left_Motor_Position > l_Right_Motor_Position)
          {
           // May have to update this if different calibration time is used
            ui_Right_Motor_Offset = 0;
            ui_Left_Motor_Offset = (l_Left_Motor_Position - l_Right_Motor_Position) / 4;  
          }
          else
          {
           // May have to update this if different calibration time is used
            ui_Right_Motor_Offset = (l_Right_Motor_Position - l_Left_Motor_Position) / 4;
            ui_Left_Motor_Offset = 0;
          }
          
#ifdef DEBUG_MOTOR_CALIBRATION
          Serial.print("Motor Offsets: Left = ");
          Serial.print(ui_Left_Motor_Offset);
          Serial.print(", Right = ");
          Serial.println(ui_Right_Motor_Offset);
#endif              
          EEPROM.write(ci_Right_Motor_Offset_Address_L, lowByte(ui_Right_Motor_Offset));
          EEPROM.write(ci_Right_Motor_Offset_Address_H, highByte(ui_Right_Motor_Offset));
          EEPROM.write(ci_Left_Motor_Offset_Address_L, lowByte(ui_Left_Motor_Offset));
          EEPROM.write(ci_Left_Motor_Offset_Address_H, highByte(ui_Left_Motor_Offset));
          
          ui_Robot_State_Index = 0;    // go back to Mode 0 
        }
#ifdef DEBUG_MOTOR_CALIBRATION           
          Serial.print("Encoders L: ");
          Serial.print(encoder_LeftMotor.getRawPosition());
          Serial.print(", R: ");
          Serial.println(encoder_RightMotor.getRawPosition());
#endif        
        ui_Mode_Indicator_Index = 4;
      } 
      break;
    }    
  }

  if((millis() - ul_Display_Time) > ci_Display_Time)
  {
    ul_Display_Time = millis();

#ifdef DEBUG_MODE_DISPLAY  
    Serial.print("Mode: ");
    Serial.println(ui_Mode_Indicator[ui_Mode_Indicator_Index], DEC);
#endif
    bt_Heartbeat = !bt_Heartbeat;
    CharliePlexM::Write(ci_Heartbeat_LED, bt_Heartbeat);
    digitalWrite(13, bt_Heartbeat);
    Indicator();
  }
} 

// set mode indicator LED state
void Indicator()
{
  //display routine, if true turn on led
  CharliePlexM::Write(ci_Indicator_LED,!(ui_Mode_Indicator[ui_Mode_Indicator_Index] & 
                      (iArray[iArrayIndex])));
  iArrayIndex++;
  iArrayIndex = iArrayIndex & 15;
}


// measure distance to target using ultrasonic sensor  
void Ping1()
{
  //Send the Ultrasonic Range Finder a 10 microsecond pulse per tech spec
  digitalWrite(Ultrasonic_Ping1, HIGH);
  delayMicroseconds(10);  //The 10 microsecond pause where the pulse in "high"
  digitalWrite(Ultrasonic_Ping1, LOW);
  //use command pulseIn to listen to Ultrasonic_Data pin to record the
  //time that it takes from when the Pin goes HIGH until it goes LOW 
  ultrasonic1 = pulseIn(Ultrasonic_Data1, HIGH, 10000);
}
void Ping2()
{
  //Send the Ultrasonic Range Finder a 10 microsecond pulse per tech spec
  digitalWrite(Ultrasonic_Ping2, HIGH);
  delayMicroseconds(10);  //The 10 microsecond pause where the pulse in "high"
  digitalWrite(Ultrasonic_Ping2, LOW);
  //use command pulseIn to listen to Ultrasonic_Data pin to record the
  //time that it takes from when the Pin goes HIGH until it goes LOW 
  ultrasonic2 = pulseIn(Ultrasonic_Data2, HIGH, 10000);
}


/*
IR testing code
#include <SoftwareSerial.h>

SoftwareSerial mySerial(2, 11); // RX, TX

void setup() {

  // Open serial communications and wait for port to open:
  Serial.begin(9600);

  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }
  Serial.println("MSE 2202 IR tester");

  // set the data rate for the SoftwareSerial port
  mySerial.begin(2400);
  //mySerial.println("Hello, world?");
}

 

void loop() { // run over and over

  if (mySerial.available())
    {
      int x = mySerial.read();
      Serial.println("Frequency: ");
      Serial.println(x);
      if ( x >= 48 && x <= 51 || x >= 248 && x <= 255)
      {
        Serial.println("light found");
//        IR_ON = true; 
      }
      else
      {
        Serial.println("light NOT found");
//        IR_ON = false;
      }
}
}
*/
