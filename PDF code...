#include <Servo.h>
#include <EEPROM.h>
#include <uSTimer2.h>
#include <CharliePlexM.h>
#include <Wire.h>
#include <I2CEncoder.h>
#include <StackArray.h>
#include "NewPing.h"
#include <SoftwareSerial.h>

Servo servo_RightMotor;
Servo servo_LeftMotor;
Servo servo_SweeperMotor;
Servo servo_ScooperMotor;

I2CEncoder encoder_RightMotor;
I2CEncoder encoder_LeftMotor;

class Movement
{
  public:
    int move;
    unsigned long time;
};
StackArray <Movement> stack;
unsigned int stackSize;

boolean bt_Motors_Enabled = true;

//port pin constants
const int ci_Light_Sensor = 2;
const int ci_Charlieplex_LED1 = 4;
const int ci_Charlieplex_LED2 = 5;
const int ci_Charlieplex_LED3 = 6;
const int ci_Charlieplex_LED4 = 7;
const int ci_Mode_Button = 7;
const int ci_Right_Motor = 8;
const int ci_Left_Motor = 9;
const int ci_Scooper_Motor = 10;
const int ci_Sweeper_Motor = 11;
const int ci_Motor_Enable_Switch = 12;
const int ci_I2C_SDA = A4;         // I2C data = white
const int ci_I2C_SCL = A5;         // I2C clock = yellow
#define Ultrasonic_Ping1  A0 //front Sensor
#define Ultrasonic_Data1  A0
#define Ultrasonic_Ping2  A1 //left sesnor 
#define Ultrasonic_Data2  A1
#define Ultrasonic_Ping3  A2 //right sesnot
#define Ultrasonic_Data3  A2
#define Ultrasonic_Ping4  A3 //backward facing sensor
#define Ultrasonic_Data4  A3

//Ultrasonic Setup
#define MAX_DISTANCE 400
NewPing sonar1(Ultrasonic_Ping1, Ultrasonic_Data1, MAX_DISTANCE);
NewPing sonar2(Ultrasonic_Ping2, Ultrasonic_Data2, MAX_DISTANCE);
NewPing sonar3(Ultrasonic_Ping3, Ultrasonic_Data3, MAX_DISTANCE);
NewPing sonar4(Ultrasonic_Ping4, Ultrasonic_Data4, MAX_DISTANCE); //for backward facing ul sensor
float echo1; // Stores calculated distance in cm for First Sensor
float echo2; // Stores calculated distance in cm for Second Sensor
float echo3; // Stores calculated distance in cm for Third Sensor
float echo4; // Stores calculated distance in cm for Fourth Sensor
float soundsp;  // Stores calculated speed of sound in M/S
float soundcm;  // Stores calculated speed of sound in cm/ms
int iterations = 2;
unsigned int ultrasonic1;
unsigned int ultrasonic2;
unsigned int ultrasonic3;
unsigned int ultrasonic4;

//constants
const int Motor_Stop = 1500;        // 200 for brake mode; 1500 for stop
const int Motor_Brake = 200;
const int ci_Scooper_Arm_Up = 160;
const int ci_Scooper_Arm_Down = 65;
const int ul_front_D = 29;
const int ul_side_D = 31;
const int ul_back_D = 3;
const int Left_Motor_Offset = 15;

//variables
unsigned int ul_3_Second_timer = 0;
unsigned int ui_Cal_Cycle;
unsigned int currentMove;
unsigned long currentTime;
unsigned long currentMillis;
unsigned long startVal;
unsigned long startTime, endTime;
unsigned long newStartTime, newEndTime;
unsigned long mtime;

//******* DONT INCLUDE********/////////
unsigned int  ui_Robot_State_Index = 0;
//0123456789ABCDEF
unsigned int  ui_Mode_Indicator[6] = {
  0x00,    //B0000000000000000,  //Stop
  0x00FF,  //B0000000011111111,  //Run
  0x0F0F,  //B0000111100001111,  //Calibrate line tracker light level
  0x3333,  //B0011001100110011,  //Calibrate line tracker dark level
  0xAAAA,  //B1010101010101010,  //Calibrate motors
  0xFFFF   //B1111111111111111   //Unused
};
unsigned int  ui_Mode_Indicator_Index = 0;
//display Bits 0,1,2,3, 4, 5, 6,  7,  8,  9,  10,  11,  12,  13,   14,   15
int  iArray[16] = {
  1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 65536
};
int  iArrayIndex = 0;
boolean bt_Heartbeat = true;
boolean bt_3_S_Time_Up = false;
boolean bt_45_S_Time_Up = false;
boolean bt_Do_Once = false;
boolean bt_Cal_Initialized = false;

//flags
bool flag_1 = true;
bool flag_2A = true;
bool flag_2B = false;
bool flag_2C = true;
bool flag_3A = true;
bool flag_3B = false;
bool flag_3C = true;
bool flag_4A = true;
bool flag_4B = false;
bool flag_4C = true;
bool flag_5A = true;
bool flag_5B = false;
bool flag_5C = true;
bool flag_6A = true;
bool flag_6B = false;
bool flag_6C = true;
bool flag_7A = true;
bool flag_7B = false;
bool flag_7C = true;
bool flag_8A = true;
bool flag_8B = false;
bool flag_8C = true;
bool A = true;
bool B = true;
bool C = true;
bool D = true;
bool flag_2B_reversed = false;
bool flag_2C_reversed = true;
bool flag_3B_reversed = false;
bool flag_3C_reversed = true;
bool flag_4B_reversed = false;
bool flag_4C_reversed = true;
bool flag_5B_reversed = false;
bool flag_5C_reversed = true;
bool flag_6B_reversed = false;
bool flag_6C_reversed = true;
bool flag_7B_reversed = false;
bool flag_7C_reversed = true;
bool flag_8B_reversed = false;
bool flag_8C_reversed = true;
bool Phase1 = true;
bool Phase2 = true;
bool Phase3 = false;
bool IR_ON = false;
bool IR1 = false;
bool IR2 = true;
bool comm_flag = true;
bool stack_empty;

//Infared Setup
SoftwareSerial mySerial(2, 13); // RX, TX
void Infrared()
{
  if (mySerial.available())
  {
    int x = mySerial.read();
    if ((x >= 49 && x <= 51) || x == 66)
    {
      IR_ON = true;
    }
    else
    {
      IR_ON = false;
    }
    while (mySerial.available()) {
      int trash = mySerial.read();
    }
  }
  else
  {
    IR_ON = false;
  }
}

void setup()
{
  Wire.begin();// Wire library required for I2CEncoder library
  Serial.begin(9600);
  mySerial.begin(2400);
  CharliePlexM::setBtn(ci_Charlieplex_LED1, ci_Charlieplex_LED2, ci_Charlieplex_LED3, ci_Charlieplex_LED4, ci_Mode_Button);
  // set up drive motors
  pinMode(ci_Right_Motor, OUTPUT);
  servo_RightMotor.attach(ci_Right_Motor);
  pinMode(ci_Left_Motor, OUTPUT);
  servo_LeftMotor.attach(ci_Left_Motor);
  // set up scooper motor
  pinMode(ci_Scooper_Motor, OUTPUT);
  servo_ScooperMotor.attach(ci_Scooper_Motor);
  // set up encoders
  encoder_LeftMotor.init(1.0 / 3.0 * MOTOR_393_SPEED_ROTATIONS, MOTOR_393_TIME_DELTA);
  encoder_LeftMotor.setReversed(false);  // adjust for positive count when moving forward
  encoder_RightMotor.init(1.0 / 3.0 * MOTOR_393_SPEED_ROTATIONS, MOTOR_393_TIME_DELTA);
  encoder_RightMotor.setReversed(true);  // adjust for positive count when moving forward
}

void loop()
{
  //3 seconds timer flag
  if ((millis() - ul_3_Second_timer) > 3000)
  {
    bt_3_S_Time_Up = true;
  }
  // button-based mode selection
  if (CharliePlexM::ui_Btn)
  {
    if (bt_Do_Once == false)
    {
      bt_Do_Once = true;
      ui_Robot_State_Index++;
      ui_Robot_State_Index = ui_Robot_State_Index & 7;
      ul_3_Second_timer = millis();
      bt_3_S_Time_Up = false;
      bt_Cal_Initialized = false;
      ui_Cal_Cycle = 0;
    }
  }
  else
  {
    bt_Do_Once = LOW;
  }
  bt_Motors_Enabled = digitalRead(ci_Motor_Enable_Switch);


  switch (ui_Robot_State_Index)
  {
    case 0: //Robot stopped
      {
        Ping();
        servo_ScooperMotor.write(ci_Scooper_Arm_Down);
        Stop();
        break;
      }
    case 1:  //Robot Run after 3 seconds
      {
        Ping();
        Infrared();
        servo_ScooperMotor.write(ci_Scooper_Arm_Down);
        if ( stackSize >= 5 || bt_45_S_Time_Up && Phase2 == true)
        {
          Phase2 = false;
          Phase3 = true;
        }
        if (Phase1 == true) {
          if (bt_3_S_Time_Up) {
            if (ultrasonic1 > ul_front_D && A == true) { // go foward if nothing is at front
              if (flag_1 == true) {
                startTime = millis(); // start time
                flag_1 = false;
              }
              goForward(200);
            }
            else if ((ultrasonic1 < ul_front_D || ultrasonic2 < ul_side_D || ultrasonic3 < ul_side_D) && A == true ) {
              endTime = millis(); // end time
              currentTime = endTime - startTime;
              A = false;
            }
            if (A == false && B == true) {
              newStartTime = millis();
              if (C == true) {
                newEndTime = newStartTime + currentTime;
                C = false;
              }
              if (newStartTime < newEndTime) {
                goBackward(200);
              }
              else {
                Stop();
                B = false;
              }
            }
            if (A == false && B == false) {
              Dump();
              Phase1 = false;
              B = true;
              A = true;
              flag_1 = true;
            }
          }
        }
        if (Phase1 == false) {
          if (Phase2 == true) {
            if (ultrasonic1 > ul_front_D && ultrasonic2 > ul_side_D && ultrasonic3 > ul_side_D && flag_1 == true) { //Case 1: no objects nearby
              if (A == true) {
                startTime = millis();
                A = false;
              }
              goForward(200); // drive straight
            }
            else if (ultrasonic1 <= ul_front_D  && ultrasonic2 <= ul_side_D && ultrasonic3 <= ul_side_D && flag_2A == true) { //Case 2: object in front AND object on left and right
              Stop();
              flag_1 = false;
              if (A == false) {
                endTime = millis();
                mtime = endTime - startTime;
                saveMove(1, mtime);
                A = true;
              }
              flag_2A = false;
              flag_3A = false;
              flag_4A = false;
              flag_5A = false;
              flag_6A = false;
              flag_7A = false;
              flag_8A = false;
              flag_2B = true;
            }
            if (flag_2B == true) {
              currentMillis = millis();
              if (flag_2C == true) { // start timer
                startVal = currentMillis;
                flag_2C = false;
              }
              if (flag_2C == false) {
                if ((currentMillis - startVal) < 400) { //back up slightly after .4 seconds
                  goBackward(100);
                }
                else if ((currentMillis - startVal) > 400 && (currentMillis - startVal) < 1200) { //turn 180
                  turnLeft(200);
                }
                else if ((currentMillis - startVal) > 1200) {
                  flag_1 = true;
                  flag_2A = true;
                  flag_3A = true;
                  flag_4A = true;
                  flag_5A = true;
                  flag_6A = true;
                  flag_7A = true;
                  flag_8A = true;
                  flag_2B = false;
                  flag_2C = true;
                  saveMove(2, 1200);
                }
              }
            }
            else if (ultrasonic1 <= ul_front_D && ultrasonic2 > ul_side_D && ultrasonic3 > ul_side_D && flag_3A == true) { //Case 3: object in front, no object on left, no object on right
              Stop();
              flag_1 = false;
              if (A == false) {
                endTime = millis();
                mtime = endTime - startTime;
                saveMove(1, mtime);
                A = true;
              }
              flag_2A = false;
              flag_3A = false;
              flag_4A = false;
              flag_5A = false;
              flag_6A = false;
              flag_7A = false;
              flag_8A = false;
              flag_3B = true;
            }
            if (flag_3B == true) {
              currentMillis = millis();
              if (flag_3C == true) { // start timer
                startVal = currentMillis;
                flag_3C = false;
              }
              if (flag_3C == false) {
                if ((currentMillis - startVal) < 400) { //back up slightly after .4 seconds
                  goBackward(100);
                }
                else if ((currentMillis - startVal) > 400 && (currentMillis - startVal) < 1400) { //turn left 225deg
                  turnLeft(200);
                }
                else if ((currentMillis - startVal) > 1400) {
                  flag_1 = true;
                  flag_2A = true;
                  flag_3A = true;
                  flag_4A = true;
                  flag_5A = true;
                  flag_6A = true;
                  flag_7A = true;
                  flag_8A = true;
                  flag_3B = false;
                  flag_3C = true;
                  saveMove(3, 1400);
                }
              }
            }
            else if (ultrasonic1 > ul_front_D && ultrasonic2 > ul_side_D && ultrasonic3 <= ul_side_D && flag_4A == true) { //Case 4: NO object in front, no object on left, AND object on right
              Stop();
              flag_1 = false;
              if (A == false) {
                endTime = millis();
                mtime = endTime - startTime;
                saveMove(1, mtime);
                A = true;
              }
              flag_2A = false;
              flag_3A = false;
              flag_4A = false;
              flag_5A = false;
              flag_6A = false;
              flag_7A = false;
              flag_8A = false;
              flag_4B = true;
            }
            if (flag_4B == true) {
              currentMillis = millis();
              if (flag_4C == true) { // start timer
                startVal = currentMillis;
                flag_4C = false;
              }
              if (flag_4C == false) {
                if ((currentMillis - startVal) < 400) { //turn left 90deg
                  turnLeft(200);
                }
                else if ((currentMillis - startVal) > 400) {
                  flag_1 = true;
                  flag_2A = true;
                  flag_3A = true;
                  flag_4A = true;
                  flag_5A = true;
                  flag_6A = true;
                  flag_7A = true;
                  flag_8A = true;
                  flag_4B = false;
                  flag_4C = true;
                  saveMove(4, 400);
                }
              }
            }

            else if (ultrasonic1 > ul_front_D && ultrasonic2 <= ul_side_D && ultrasonic3 > ul_side_D && flag_5A == true) { //Case 5: NO object in front, AND object on left, no object on right
              Stop();
              flag_1 = false;
              if (A == false) {
                endTime = millis();
                mtime = endTime - startTime;
                saveMove(1, mtime);
                A = true;
              }
              flag_2A = false;
              flag_3A = false;
              flag_4A = false;
              flag_5A = false;
              flag_6A = false;
              flag_7A = false;
              flag_8A = false;
              flag_5B = true;
            }
            if (flag_5B == true) {
              currentMillis = millis();
              if (flag_5C == true) { // start timer
                startVal = currentMillis;
                flag_5C = false;
              }
              if (flag_5C == false)
              {
                if ((currentMillis - startVal) < 400) { //turn right 90deg
                  turnRight(200);
                }
                else if ((currentMillis - startVal) > 400) {
                  flag_1 = true;
                  flag_2A = true;
                  flag_3A = true;
                  flag_4A = true;
                  flag_5A = true;
                  flag_6A = true;
                  flag_7A = true;
                  flag_8A = true;
                  flag_5B = false;
                  flag_5C = true;
                  saveMove(5, 400);
                }
              }
            }

            else if (ultrasonic1 <= ul_front_D && ultrasonic2 <= ul_side_D && ultrasonic3 > ul_side_D && flag_6A == true) { //Case 6: object in front, AND object on left, no object on right
              Stop();
              flag_1 = false;
              if (A == false) {
                endTime = millis();
                mtime = endTime - startTime;
                saveMove(1, mtime);
                A = true;
              }
              flag_2A = false;
              flag_3A = false;
              flag_4A = false;
              flag_5A = false;
              flag_6A = false;
              flag_7A = false;
              flag_8A = false;
              flag_6B = true;
            }
            if (flag_6B == true) {
              currentMillis = millis();
              if (flag_6C == true) { // start timer
                startVal = currentMillis;
                flag_6C = false;
              }
              if (flag_6C == false) {
                if ((currentMillis - startVal) < 400) { //back up slightly after .4 seconds
                  goBackward(100);
                }
                else if ((currentMillis - startVal) > 400 && (currentMillis - startVal) < 800) { //turn right 90 deg
                  turnRight(200);
                }
                else if ((currentMillis - startVal) > 800) {
                  flag_1 = true;
                  flag_2A = true;
                  flag_3A = true;
                  flag_4A = true;
                  flag_5A = true;
                  flag_6A = true;
                  flag_7A = true;
                  flag_8A = true;
                  flag_6B = false;
                  flag_6C = true;
                  saveMove(6, 800);
                }
              }
            }

            else if (ultrasonic1 <= ul_front_D && ultrasonic2 > ul_side_D && ultrasonic3 <= ul_side_D && flag_7A == true) { //Case 7: object in front, no object on left, AND object on right
              Stop();
              flag_1 = false;
              if (A == false) {
                endTime = millis();
                mtime = endTime - startTime;
                saveMove(1, mtime);
                A = true;
              }
              flag_2A = false;
              flag_3A = false;
              flag_4A = false;
              flag_5A = false;
              flag_6A = false;
              flag_7A = false;
              flag_8A = false;
              flag_7B = true;
            }
            if (flag_7B == true) {
              currentMillis = millis();
              if (flag_7C == true) {
                startVal = currentMillis;
                flag_7C = false;
              }
              if (flag_7C == false) {
                if ((currentMillis - startVal) < 400) {
                  goBackward(100); //back up slightly after .4 seconds
                }
                else if ((currentMillis - startVal) > 400 && (currentMillis - startVal) < 800) {
                  turnLeft(200); //turn left 90 deg
                }
                else if ((currentMillis - startVal) > 800) {
                  flag_1 = true;
                  flag_2A = true;
                  flag_3A = true;
                  flag_4A = true;
                  flag_5A = true;
                  flag_6A = true;
                  flag_7A = true;
                  flag_8A = true;
                  flag_7B = false;
                  flag_7C = true;
                  saveMove(7, 800);
                }
              }
            }

            else if (ultrasonic1 > ul_front_D && ultrasonic2 <= ul_side_D && ultrasonic3 <= ul_side_D && flag_8A == true) { //Case 8: no object in front, AND object on left, AND object on right
              Stop();
              flag_1 = false;
              if (A == false) {
                endTime = millis();
                mtime = endTime - startTime;
                saveMove(1, mtime);
                A = true;
              }
              flag_2A = false;
              flag_3A = false;
              flag_4A = false;
              flag_5A = false;
              flag_6A = false;
              flag_7A = false;
              flag_8A = false;
              flag_8B = true;
            }
            if (flag_8B == true) {
              currentMillis = millis();
              if (flag_8C == true) {
                startVal = currentMillis;
                flag_8C = false;
              }
              if (flag_8C == false)
              {
                if ((currentMillis - startVal) < 400) {
                  goBackward(100); //back up slightly after .4 seconds
                }
                else if ((currentMillis - startVal) > 400 && (currentMillis - startVal) < 1200) {
                  turnLeft(200); //turn 180
                }
                else if ((currentMillis - startVal) > 1200) {
                  flag_1 = true;
                  flag_2A = true;
                  flag_3A = true;
                  flag_4A = true;
                  flag_5A = true;
                  flag_6A = true;
                  flag_7A = true;
                  flag_8A = true;
                  flag_8B = false;
                  flag_8C = true;
                  saveMove(8, 1200);
                }
              }
            }
          }
          else if (Phase3 == true) { //begin transversing
            if (A == false) { // save case 1 if its running while timer ends
              endTime = millis();
              mtime = endTime - startTime;
              saveMove(1, mtime);
              A = true;
            }
            if (D == true) { // check if stack is empty
              stack_empty = stack.isEmpty(); // flag to check if stack is empty: 0 = full, 1 = empty
              D = false;
            }
            if (B == true && stack_empty == false) {
              Movement lastMove;
              lastMove = stack.pop();
              stackSize = stack.count();
              currentMove = lastMove.move;
              currentTime = lastMove.time;
              B = false;
              C = true;
            }
            if (B == false && stack_empty == false) {
              if (currentMove == 1 && B == false) {
                newStartTime = millis();
                if (C == true) {
                  newEndTime = newStartTime + currentTime;
                  C = false;
                }
                if ( newStartTime < newEndTime ) {
                  goBackward(200);
                }
                else {
                  Stop();
                  B = true;
                  D = true;
                }
              }
              else if (currentMove == 2 && B == false) {
                Stop();
                flag_2B_reversed = true;
                if (flag_2B_reversed == true) {
                  currentMillis = millis();
                  if (flag_2C_reversed == true) {
                    startVal = currentMillis; // start timer
                    flag_2C_reversed = false;
                  }
                  if (flag_2C_reversed == false) {
                    if ((currentMillis - startVal) < 800) {
                      turnLeft(200); //turn 180
                    }
                    else if ((currentMillis - startVal) > 800 && (currentMillis - startVal) < 1200) {
                      goForward(100); //go forward slightly
                    }
                    else if ((currentMillis - startVal) > 1200) {
                      flag_2B_reversed = false;
                      flag_2C_reversed = true;
                      B = true;
                    }
                  }
                }
              }
              else if (currentMove == 3 && B == false) {
                Stop();
                flag_3B_reversed = true;
                if (flag_3B_reversed == true) {
                  currentMillis = millis();
                  if (flag_3C_reversed == true) {
                    startVal = currentMillis;
                    flag_3C_reversed = false;
                  }
                  if (flag_3C_reversed == false) {
                    if ((currentMillis - startVal) < 700) {
                      turnRight(200); //turn right .7 seconds
                    }
                    else if ((currentMillis - startVal) > 700 && (currentMillis - startVal) < 1400) {
                      goForward(100); //drive straight .4 seconds
                    }
                    else if ((currentMillis - startVal) > 1400) {
                      flag_3B_reversed = false;
                      flag_3C_reversed = true;
                      B = true;
                    }
                  }
                }
              }
              else if (currentMove == 4 && B == false) {
                Stop();
                flag_4B_reversed = true;
                if (flag_4B_reversed == true) {
                  currentMillis = millis();
                  if (flag_4C_reversed == true) {
                    startVal = currentMillis;
                    flag_4C_reversed = false;
                  }
                  if (flag_4C_reversed == false) {
                    if ((currentMillis - startVal) < 400) {
                      turnRight(200); //turn right 90deg
                    }
                    else if ((currentMillis - startVal) > 400) {
                      flag_4B_reversed = false;
                      flag_4C_reversed = true;
                      B = true;
                    }
                  }
                }
              }
              else if (currentMove == 5 && B == false) {
                Stop();
                flag_5B_reversed = true;
                if (flag_5B_reversed == true) {
                  currentMillis = millis();
                  if (flag_5C_reversed == true) {
                    startVal = currentMillis;
                    flag_5C_reversed = false;
                  }
                  if (flag_5C_reversed == false) {
                    if ((currentMillis - startVal) < 500) {
                      turnLeft(200); //turn left 90deg
                    }
                    else if ((currentMillis - startVal) > 500) {
                      flag_5B_reversed = false;
                      flag_5C_reversed = true;
                      B = true;
                    }
                  }
                }
              }
              else if (currentMove == 6 && B == false) {
                Stop();
                flag_6B_reversed = true;
                if (flag_6B_reversed == true) {
                  currentMillis = millis();
                  if (flag_6C_reversed == true) {
                    startVal = currentMillis;
                    flag_6C_reversed = false;
                  }
                  if (flag_6C_reversed == false) {
                    if ((currentMillis - startVal) < 400) {
                      turnLeft(200); //turn left 90deg
                    }
                    else if ((currentMillis - startVal) > 400 && (currentMillis - startVal) < 800)  {
                      goForward(100); //drive stright 0.4s
                    }
                    else if ((currentMillis - startVal) > 800) {
                      flag_6B_reversed = false;
                      flag_6C_reversed = true;
                      B = true;
                    }
                  }
                }
              }
              else if (currentMove == 7 && B == false) {
                Stop();
                flag_7B_reversed = true;
                if (flag_7B_reversed == true) {
                  currentMillis = millis();
                  if (flag_6C_reversed == true) {
                    startVal = currentMillis;
                    flag_7C_reversed = false;
                  }
                  if (flag_7C_reversed == false) {
                    if ((currentMillis - startVal) < 400) {
                      turnRight(200); //turn right 90deg
                    }
                    else if ((currentMillis - startVal) > 400 && (currentMillis - startVal) < 800) {
                      goForward(100); //drive stright 0.4s
                    }
                    else if ((currentMillis - startVal) > 800) {
                      flag_7B_reversed = false;
                      flag_7C_reversed = true;
                      B = true;
                    }
                  }
                }
              }
              else if (currentMove == 8 && B == false) {
                Stop();
                flag_8B_reversed = true;
                if (flag_8B_reversed == true) {
                  currentMillis = millis();
                  if (flag_8C_reversed == true) {
                    startVal = currentMillis;
                    flag_8C_reversed = false;
                  }
                  if (flag_8C_reversed == false) {
                    if ((currentMillis - startVal) < 800) {
                      turnRight(200); //turn 180
                    }
                    else if ((currentMillis - startVal) > 800 && (currentMillis - startVal) < 1200) {
                      goForward(100); //go forward slightly
                    }
                    else if ((currentMillis - startVal) > 1200) {
                      flag_8B_reversed = false;
                      flag_8C_reversed = true;
                      B = true;
                    }
                  }
                }
              }
            } // transversing
            if (stack_empty == true) {
              ReturnHome();
              if (!comm_flag) {
                Phase2 = true;
                Phase3 = false;
                comm_flag = true;
              }
            }
            break;
          } // if phase 3 is true
        } // if Phase 1 is false
      } // case 1
  } // switch
} // void loop()

void saveMove(int m, unsigned long t)
{
  Movement T;
  T.move = m;
  T.time = t;
  stack.push(T);
  stackSize = stack.count();
}

// measure distance to target using ultrasonic sensor
void Ping()
{
  soundsp = 331.4; // Calculate the Speed of Sound in M/S
  soundcm = soundsp / 10000;  // Convert to cm/ms

  echo1 = sonar1.ping_median(iterations); // Measure duration for first sensor (front)
  echo2 = sonar2.ping_median(iterations); // Measure duration for second sensor (left)
  echo3 = sonar3.ping_median(iterations); // Measure duration for third sensor (right)
  echo4 = sonar4.ping_median(iterations); // Measure duration for fourth sensor (back)

  if (echo1) {
    ultrasonic1 = (echo1 / 2) * soundcm;
  }
  if (echo2) {
    ultrasonic2 = (echo2 / 2) * soundcm;
  }
  if (echo3) {
    ultrasonic3 = (echo3 / 2) * soundcm;
  }
  if (echo4) {
    ultrasonic4 = (echo4 / 2) * soundcm;
  }
}

void Stop()
{
  servo_RightMotor.writeMicroseconds(Motor_Stop);
  servo_LeftMotor.writeMicroseconds(Motor_Stop);
}
void goForward(int speed)
{
  servo_RightMotor.writeMicroseconds(Motor_Stop + speed);
  servo_LeftMotor.writeMicroseconds(Motor_Stop + Left_Motor_Offset + speed);
}
void goBackward(int speed)
{
  servo_RightMotor.writeMicroseconds(Motor_Stop - speed);
  servo_LeftMotor.writeMicroseconds(Motor_Stop - Left_Motor_Offset - speed);
}
void turnRight(int speed)
{
  servo_RightMotor.writeMicroseconds(Motor_Stop - speed);
  servo_LeftMotor.writeMicroseconds(Motor_Stop + Left_Motor_Offset + speed);
}
void turnLeft(int speed)
{
  servo_RightMotor.writeMicroseconds(Motor_Stop + speed);
  servo_LeftMotor.writeMicroseconds(Motor_Stop - Left_Motor_Offset - speed);
}

void Dump()
{
  servo_ScooperMotor.write(ci_Scooper_Arm_Down);
  for (int i = ci_Scooper_Arm_Down; i < ci_Scooper_Arm_Up; i += 3)
  {
    delay(50);
    servo_ScooperMotor.write(i);
  }
  delay(1000);
  servo_ScooperMotor.write(ci_Scooper_Arm_Down);
}

void ReturnHome()
{
  if (IR_ON == true && ultrasonic4 > ul_back_D && IR1 == false) { // Case 1: IR on, UL off
    goBackward(100); // Drive backwards
  }
  else if (IR_ON == false && ultrasonic4 > ul_back_D && IR1 == false) { //Case 2: IR OFF, UL off 
    turnRight(200); //Rotate 360
  }
  else if (IR_ON == false && ultrasonic4 <= ul_back_D && IR1 == false) { //Case 3: IR OFF, UL on
    IR1 = true;
  }
  if (IR1 == true) {
    currentMillis = millis();
    IR2 = true;
    if (IR2 == true) {
      startVal = currentMillis;
      IR2 = false;
    }
    if (IR2 == false) {
      if ((currentMillis - startVal) < 800) {
        goForward(100); // Back up (go forward)
      }
      else if ((currentMillis - startVal) > 800) {
        IR1 = false;
      }
    }
  }
  else if (IR_ON == true && ultrasonic4 <= ul_back_D && IR1 == false) { //Case 4(Last step): IR on, UL on
    Stop(); //Stop
    Dump(); //Dump
    comm_flag = false;
  }
}
