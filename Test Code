#include <Servo.h>
#include <EEPROM.h>
#include <Wire.h>

Servo servo_RightMotor;
Servo servo_LeftMotor;

//port pin constants
const int UltrasonicPing1 = 2;   //front-facing input plug
const int UltrasonicData1 = 3;   //front-facing output plug
const int ci_Charlieplex_LED1 = 4;
const int ci_Charlieplex_LED2 = 5;
const int ci_Charlieplex_LED3 = 6;
const int ci_Charlieplex_LED4 = 7;
const int ci_Mode_Button = 7;
const int RightMotor = 8;
const int LeftMotor = 9;
//const int (insert motor / sensor here) = 10;
//const int (insert motor / sensor here) = 11;
const int ci_Motor_Enable_Switch = 12;
const int UltrasonicPing2 = A0; //left-facing input plug
const int UltrasonicData2 = A1; //left-facing output plug
// const int  (insert motor / sensor here)= A2;
const int ci_Light_Sensor = A3;
const int ci_I2C_SDA = A4;         // I2C data = white
const int ci_I2C_SCL = A5;         // I2C clock = yellow

unsigned int  Run_Robot = 0;
unsigned long ultrasonic1;
unsigned long ultrasonic2;

unsigned long ultrasonic1cm = ultrasonic1/58;
unsigned long ultrasonic2cm = ultrasonic2/58;

unsigned long currentMillis;
unsigned long startVal;

const int motor_stop=1500;



bool T = false;
bool M = false;

bool F = false;
bool G = false;

void Ping1()
{
  //Ping Ultrasonic
  //Send the Ultrasonic Range Finder a 10 microsecond pulse per tech spec
  digitalWrite(UltrasonicPing1, HIGH);
  delayMicroseconds(10);  //The 10 microsecond pause where the pulse in "high"
  digitalWrite(UltrasonicPing1, LOW);
  //use command pulseIn to listen to Ultrasonic_Data pin to record the
  //time that it takes from when the Pin goes HIGH until it goes LOW 
  ultrasonic1 = pulseIn(UltrasonicData1, HIGH, 10000);
}

void Ping2()
{
    //Ping Ultrasonic
  //Send the Ultrasonic Range Finder a 10 microsecond pulse per tech spec
  digitalWrite(UltrasonicPing2, HIGH);
  delayMicroseconds(10);  //The 10 microsecond pause where the pulse in "high"
  digitalWrite(UltrasonicPing2, LOW);
  //use command pulseIn to listen to Ultrasonic_Data pin to record the
  //time that it takes from when the Pin goes HIGH until it goes LOW 
  ultrasonic2 = pulseIn(UltrasonicData2, HIGH, 10000);
}

void setup() 
{
  Serial.begin(9600);
  //Set up Front facing ultrasonic sensor
 pinMode(UltrasonicPing1, OUTPUT);
  pinMode(UltrasonicData1, INPUT);

  // Set up Left facing ultrasonic sensor
   pinMode(UltrasonicPing2, OUTPUT);
  pinMode(UltrasonicData2, INPUT);
//set up motors
 pinMode(RightMotor, OUTPUT);
 servo_RightMotor.attach(RightMotor);
  
 pinMode(LeftMotor, OUTPUT);
 servo_LeftMotor.attach(LeftMotor);
  
}

void loop() 
{
Ping1 ();
Ping2 (); 
Serial.print("cm1: ");
Serial.print(ultrasonic1cm);
Serial.print("cm2: ");
Serial.print(ultrasonic2cm);

// ultrasonic1 is front facing, ultrasonic2 is left facing
if (ultrasonic1cm > 3 && ultrasonic2cm > 3) //no objects nearby, drive straight 
{
  servo_RightMotor.writeMicroseconds(1600);
  servo_LeftMotor.writeMicroseconds(1600);
  Serial.print("1");
 
}

else if (ultrasonic1cm < 3  && ultrasonic2cm > 3) //object in front, NO object on left, back up turn left
{
        servo_LeftMotor.writeMicroseconds(1500); //stop
        servo_RightMotor.writeMicroseconds(1500); 
        T=true; 
        M = true;
        Serial.print("2");
}
      if (T == true)
         {
            currentMillis = millis();
            
            if(M == true)
            {
               startVal = currentMillis;
               M=false;
            }

            if((currentMillis-startVal) < 1000) 
            {
            servo_RightMotor.writeMicroseconds(1400); //back up slightly 
            servo_LeftMotor.writeMicroseconds(1400);
            Serial.print("3");
            }
            else if((currentMillis-startVal)> 1000 && (currentMillis-startVal) < 2000) 
            {
             servo_RightMotor.writeMicroseconds(1700); //turn left
             servo_LeftMotor.writeMicroseconds(1500);
             Serial.print("3");
             M=true;
            }
}

else if (ultrasonic1cm < 3  && ultrasonic2cm < 3)//object in front, AND object on left, back up turn right
{
   servo_LeftMotor.writeMicroseconds(1500); //stop
   servo_RightMotor.writeMicroseconds(1500);
   Serial.print("4"); 
   F = true; 
   G = true;
}
      if (F == true)
         {
            currentMillis = millis();
            
            if(G == true)
            {
               startVal = currentMillis;
               G=false;
            }

            if((currentMillis-startVal) < 1000) 
            {
              servo_RightMotor.writeMicroseconds(1400); //back up slightly 
              servo_LeftMotor.writeMicroseconds(1400);
              Serial.print("5");
            }
            else if((currentMillis-startVal)> 1000 && (currentMillis-startVal) < 2000) 
            {
             servo_RightMotor.writeMicroseconds(1500); //turn right
             servo_LeftMotor.writeMicroseconds(1700);
             G=true;
             Serial.print("6");
            }
}

}
